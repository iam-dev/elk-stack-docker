---
version: "3.6"
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${TAG}
    container_name: elasticsearch
    secrets:
      - source: elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: elasticsearch.keystore
        target: /usr/share/elasticsearch/config/elasticsearch.keystore
      - source: elasticsearch.key
        target: /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key
      - source: elasticsearch.crt
        target: /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt
      - source: license.json
        target: /usr/share/elasticsearch/license.json
    ports:
      - ${ELASTIC_PORT}:${ELASTIC_PORT}
      - ${ELASTIC_PORT2}:${ELASTIC_PORT2}
    networks: ['stack']
    volumes:
      - ./esdata:/usr/share/elasticsearch/data
      - './scripts/setup-users.sh:/usr/local/bin/setup-users.sh:ro'
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node   
    healthcheck:      
      test: curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -s https://localhost:${ELASTIC_PORT} >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:${TAG}
    container_name: kibana
    secrets:
      - source: kibana.yml
        target: /usr/share/kibana/config/kibana.yml
      - source: kibana.keystore
        target: /usr/share/kibana/data/kibana.keystore  
      - source: ca.crt
        target: /usr/share/kibana/config/certs/ca/ca.crt
      - source: kibana.key
        target: /usr/share/kibana/config/certs/kibana/kibana.key
      - source: kibana.crt
        target: /usr/share/kibana/config/certs/kibana/kibana.crt           
    ports: 
      - ${KIBANA_PORT}:${KIBANA_PORT}    
    networks: ['stack']
    depends_on: ['elasticsearch']
    healthcheck:      
      test: curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -s https://localhost:${KIBANA_PORT}  >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:${TAG}
    container_name: logstash
    secrets:
      - source: logstash.conf
        target: /usr/share/logstash/pipeline/logstash.conf
      - source: logstash.yml
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash.keystore
        target: /usr/share/logstash/config/logstash.keystore
      - source: ca.crt
        target: /usr/share/logstash/config/certs/ca/ca.crt        
    healthcheck:
      test: bin/logstash -t
      interval: 60s
      timeout: 50s
      retries: 5

    filebeat:
      image: docker.elastic.co/beats/filebeat:${TAG}
      container_name: filebeat
      command: --strict.perms=false -e  # -e flag to log to stderr and disable syslog/file output
      # If the host system has logs at "/var/log", mount them at "/mnt/log"
      # inside the container, where Filebeat can find them.
      # volumes: ['/var/log:/mnt/log:ro']
      secrets:
        - source: filebeat.yml
          target: /usr/share/filebeat/filebeat.yml
        - source: filebeat.keystore
          target: /usr/share/filebeat/filebeat.keystore
        - source: ca.crt
          target: /usr/share/filebeat/certs/ca/ca.crt          
      volumes:
        - './scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro'
      networks: ['stack']
      depends_on: ['elasticsearch', 'kibana']
      healthcheck:
        test: filebeat test config
        interval: 30s
        timeout: 15s
        retries: 5

  apm-server:
    image: docker.elastic.co/apm/apm-server:${TAG}
    container_name: apm_server
    secrets:
      - source: apm-server.yml
        target: /usr/share/apm-server/apm-server.yml
      - source: apm-server.keystore
        target: /usr/share/apm-server/apm-server.keystore
      - source: ca.crt
        target: /usr/share/apm-server/certs/ca/ca.crt
    ports:
      - ${APM_PORT}:${APM_PORT}
    networks: ['stack']
    command: --strict.perms=false -e  # -e flag to log to stderr and disable syslog/file output
    depends_on: ['elasticsearch', 'kibana']
    healthcheck:
      test: curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -s https://localhost:${APM_PORT}/healthcheck >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

networks: {stack: {}}
# use docker volume to persist ES data outside of a container.
volumes:
  esdata:

secrets:
  ca.crt:
    file: ./config/ssl/ca/ca.crt
  license:
    file: ./config/license/license.json
  logstash.yml:
    file: ./config/logstash/logstash.yml
  logstash.keystore:
    file: ./config/logstash/logstash.keystore
  logstash.conf:
    file: ./config/logstash/pipeline/logstash.conf
  elasticsearch.yml:
    file: ./config/elasticsearch/elasticsearch.yml
  elasticsearch.keystore:
    file: ./config/elasticsearch/elasticsearch.keystore
  elasticsearch.key:
    file: ./config/elasticsearch/elasticsearch.key
  elasticsearch.crt:
    file: ./config/elasticsearch/elasticsearch.crt
  elasticsearch.p12:
    file: ./config/elasticsearch/elasticsearch.p12
  kibana.yml:
    file: ./config/kibana/kibana.yml
  kibana.keystore:
    file: ./config/kibana/kibana.keystore
  kibana.key:
    file: ./config/kibana/kibana.key
  kibana.crt:
    file: ./config/kibana/kibana.crt    
  filebeat.yml:
    file: ./config/filebeat/filebeat.yml
  filebeat.keystore:
    file: ./config/filebeat/filebeat.keystore
  apm-server.yml:
    file: ./config/apm-server/apm-server.yml
  apm-server.keystore:
    file: ./config/apm-server/apm-server.keystore    

